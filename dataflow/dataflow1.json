{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dateDim",
						"type": "DatasetReference"
					},
					"name": "datesource"
				},
				{
					"dataset": {
						"referenceName": "regionDim",
						"type": "DatasetReference"
					},
					"name": "regionsource"
				},
				{
					"dataset": {
						"referenceName": "weathermetrics",
						"type": "DatasetReference"
					},
					"name": "weathermetricssource"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "yassineharratiAzureDB",
						"type": "LinkedServiceReference"
					},
					"name": "dateclean"
				},
				{
					"linkedService": {
						"referenceName": "yassineharratiAzureDB",
						"type": "LinkedServiceReference"
					},
					"name": "regionclean"
				},
				{
					"linkedService": {
						"referenceName": "yassineharratiAzureDB",
						"type": "LinkedServiceReference"
					},
					"name": "weathermetricsclean"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          DateID as string,",
				"          Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> datesource",
				"source(output(",
				"          RegionID as integer,",
				"          RegionName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> regionsource",
				"source(output(",
				"          DateID as string,",
				"          RegionID as string,",
				"          AverageTemperature as string,",
				"          Humidity as string,",
				"          WindSpeed as string,",
				"          Rainfall as string,",
				"          SunshineHours as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> weathermetricssource",
				"datesource sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'dateDim',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> dateclean",
				"regionsource sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'regionDim',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> regionclean",
				"weathermetricssource sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Wheathermetrics',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> weathermetricsclean"
			]
		}
	}
}